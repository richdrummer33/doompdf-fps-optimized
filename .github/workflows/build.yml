name: Build PDF DOOM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  EMSCRIPTEN_VERSION: 3.1.45  # More recent, stable version
  PYTHON_VERSION: 3.11        # Specific version for consistency
  NODE_VERSION: 18           # LTS version

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'    # Built-in pip caching
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'    # Cache npm dependencies if any
    
    - name: Cache Emscripten
      id: cache-emsdk
      uses: actions/cache@v3
      with:
        path: |
          emsdk
          .emscripten_cache
          .emscripten
        key: ${{ runner.os }}-emscripten-${{ env.EMSCRIPTEN_VERSION }}
    
    - name: Setup Emscripten
      run: |
        if [ ! -d "emsdk" ]; then
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install ${{ env.EMSCRIPTEN_VERSION }}
          ./emsdk activate ${{ env.EMSCRIPTEN_VERSION }}
          cd ..
        fi
        source ./emsdk/emsdk_env.sh
        # Verify emcc installation and cache its output
        emcc --version
    
    - name: Setup virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
    
    - name: Download DOOM WAD with retry
      uses: wei/wget@v1
      with:
        args: -O doomgeneric/doom1.wad https://distro.ibiblio.org/slitaz/sources/packages/d/doom1.wad
    
    - name: Build
      run: |
        source .venv/bin/activate
        source ./emsdk/emsdk_env.sh
        
        # Enable ccache for faster builds
        export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
        export PATH="/usr/lib/ccache:$PATH"
        
        # Use all available cores for compilation
        emmake make -C doomgeneric -f Makefile.pdfjs -j$(nproc)
        
        # Create output directory and copy web files
        mkdir -p out
        cp web/* out/
        
        # Generate the final PDFs
        python3 embed_file.py file_template.js doomgeneric/doom1.wad out/data.js
        cat pre.js out/data.js doomgeneric/doomgeneric.js > out/compiled.js
        cat pre.js file_template.js doomgeneric/doomgeneric.js > out/compiled_nowad.js
        
        python3 generate.py out/compiled.js out/doom.pdf
        python3 generate.py out/compiled_nowad.js out/doom_nowad.pdf
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pdf-doom-${{ github.sha }}
        path: |
          out/doom.pdf
          out/doom_nowad.pdf
        retention-days: 7  # Adjust based on your needs
    
    # Optional: Add size check for the output
    - name: Check output size
      run: |
        echo "PDF sizes:"
        ls -lh out/*.pdf