name: Build PDF DOOM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  EMSCRIPTEN_FASTCOMP_BRANCH: "1.38.10"  # Branch for Emscripten Fastcomp
  PYTHON_VERSION: 3.11  # Specific Python version for consistency

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'  # Built-in pip caching

    - name: Clone and Build Fastcomp
      run: |
        git clone --branch ${{ env.EMSCRIPTEN_FASTCOMP_BRANCH }} https://github.com/emscripten-core/emscripten-fastcomp.git fastcomp
        cd fastcomp
        git clone https://github.com/emscripten-core/emscripten-fastcomp-clang.git clang
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
        cd ../..
        export LLVM=$GITHUB_WORKSPACE/fastcomp/build/bin
        export PATH=$LLVM:$PATH
        echo "Fastcomp LLVM installation completed."

    - name: Install Emscripten SDK
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install sdk-${{ env.EMSCRIPTEN_FASTCOMP_BRANCH }}-64bit
        ./emsdk activate sdk-${{ env.EMSCRIPTEN_FASTCOMP_BRANCH }}-64bit
        cd ..
        source ./emsdk/emsdk_env.sh
        emcc --version  # Verify Emscripten Fastcomp installation

    - name: Setup virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt  # Ensure all dependencies are installed

    - name: Download DOOM WAD if not present
      run: |
        if [ ! -f "doomgeneric/doom1.wad" ]; then
          echo "doom1.wad not found. Downloading..."
          wget -O doomgeneric/doom1.wad https://distro.ibiblio.org/slitaz/sources/packages/d/doom1.wad
        else
          echo "doom1.wad already exists. Skipping download."
        fi

    - name: Build only if required
      run: |
        source .venv/bin/activate
        source ./emsdk/emsdk_env.sh  # Activate Emscripten Fastcomp environment
        
        # Enable ccache for faster builds
        export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
        export PATH="/usr/lib/ccache:$PATH"
        
        # Check if a rebuild is required
        if [[ ! -f "out/compiled.js" || \
              "out/compiled.js" -ot "doomgeneric/doom1.wad" || \
              "out/compiled.js" -ot "pre.js" || \
              "out/compiled.js" -ot "doomgeneric/doomgeneric.js" ]]; then
          echo "Building as inputs have changed..."
          
          emmake make -C doomgeneric -f Makefile.pdfjs -j$(nproc)
          
          mkdir -p out
          cp web/* out/
          
          python3 embed_file.py file_template.js doomgeneric/doom1.wad out/data.js
          cat pre.js out/data.js doomgeneric/doomgeneric.js > out/compiled.js
          cat pre.js file_template.js doomgeneric/doomgeneric.js > out/compiled_nowad.js
          
          python3 generate.py out/compiled.js out/doom.pdf
          python3 generate.py out/compiled_nowad.js out/doom_nowad.pdf
        else
          echo "No changes detected. Skipping build."
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pdf-doom-${{ github.sha }}
        path: |
          out/doom.pdf
          out/doom_nowad.pdf
        retention-days: 7  # Adjust based on your needs

    - name: Check output size
      run: |
        echo "PDF sizes:"
        ls -lh out/*.pdf
