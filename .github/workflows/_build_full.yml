name: Build PDF DOOM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  EMSCRIPTEN_FASTCOMP_BRANCH: "1.38.10"
  PYTHON_VERSION: 3.11

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ hashFiles('requirements.txt') }}

      - name: Install Python Dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Check Fastcomp Cache
        id: fastcomp-cache
        uses: actions/cache@v3
        with:
          path: fastcomp/build
          key: fastcomp-build-${{ env.EMSCRIPTEN_FASTCOMP_BRANCH }}-v2

      - name: Check Cache Restoration
        run: |
          echo "Contents of fastcomp/build/bin:"
          ls -la fastcomp/build/bin || echo "Directory does not exist!"

      - name: Validate Fastcomp Cache
        id: validate-cache
        run: |
          if [ ! -f "fastcomp/build/bin/clang++" ]; then
            echo "cache-valid=false" >> $GITHUB_OUTPUT
            echo "Critical compiler files missing, will rebuild"
          else
            echo "cache-valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Build Fastcomp (if not cached or invalid)
        if: steps.fastcomp-cache.outputs.cache-hit != 'true' || steps.validate-cache.outputs.cache-valid != 'true'
        run: |
          rm -rf fastcomp  # Clean any partial cache
          git clone --branch ${{ env.EMSCRIPTEN_FASTCOMP_BRANCH }} https://github.com/emscripten-core/emscripten-fastcomp.git fastcomp
          cd fastcomp
          git clone https://github.com/emscripten-core/emscripten-fastcomp-clang.git clang
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          cd ../..

      - name: Setup Emscripten Environment
        run: |
          # Clone main emscripten repo
          git clone --branch ${{ env.EMSCRIPTEN_FASTCOMP_BRANCH }} https://github.com/emscripten-core/emscripten.git
          
          # Set up environment variables and create environment script
          echo "export LLVM=${{ github.workspace }}/fastcomp/build/bin" > emsdk_env.sh
          echo "export EMSCRIPTEN_ROOT=${{ github.workspace }}/emscripten" >> emsdk_env.sh
          echo "export EMSCRIPTEN=\$EMSCRIPTEN_ROOT" >> emsdk_env.sh
          echo "export PATH=\$LLVM:\$EMSCRIPTEN:\$PATH" >> emsdk_env.sh
          
          # Create .emscripten config file
          echo "LLVM_ROOT = '${{ github.workspace }}/fastcomp/build/bin'" > ~/.emscripten
          echo "EMSCRIPTEN_ROOT = '${{ github.workspace }}/emscripten'" >> ~/.emscripten
          echo "NODE_JS = '/usr/local/bin/node'" >> ~/.emscripten
          echo "SPIDERMONKEY_ENGINE = ''" >> ~/.emscripten
          echo "V8_ENGINE = ''" >> ~/.emscripten
          echo "TEMP_DIR = '/tmp'" >> ~/.emscripten
          echo "COMPILER_ENGINE = 'NODE_JS'" >> ~/.emscripten
          echo "JS_ENGINES = ['NODE_JS']" >> ~/.emscripten

          # Test environment
          source ./emsdk_env.sh
          emcc --version || true
          echo "Checking compiler files..."
          ls -la ${{ github.workspace }}/fastcomp/build/bin/

      - name: Download DOOM WAD
        run: |
          if [ ! -f "doomgeneric/doom1.wad" ]; then
            wget -O doomgeneric/doom1.wad https://distro.ibiblio.org/slitaz/sources/packages/d/doom1.wad
          fi

      - name: Build Project
        run: |
          source .venv/bin/activate
          source ./emsdk_env.sh
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          export PATH="/usr/lib/ccache:$PATH"
          if [[ ! -f "out/compiled.js" || \
                "out/compiled.js" -ot "doomgeneric/doom1.wad" || \
                "out/compiled.js" -ot "pre.js" || \
                "out/compiled.js" -ot "doomgeneric/doomgeneric.js" ]]; then
            emmake make -C doomgeneric -f Makefile.pdfjs -j$(nproc)
            mkdir -p out
            cp web/* out/
            python3 embed_file.py file_template.js doomgeneric/doom1.wad out/data.js
            cat pre.js out/data.js doomgeneric/doomgeneric.js > out/compiled.js
            cat pre.js file_template.js doomgeneric/doomgeneric.js > out/compiled_nowad.js
            python3 generate.py out/compiled.js out/doom.pdf
            python3 generate.py out/compiled_nowad.js out/doom_nowad.pdf
          else
            echo "No changes detected. Skipping build."
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pdf-doom-${{ github.sha }}
          path: |
            out/doom.pdf
            out/doom_nowad.pdf
          retention-days: 7

      - name: Check Output Sizes
        run: ls -lh out/*.pdf
